"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@nx-extend/core");
const devkit_1 = require("@nx/devkit");
const fs_1 = require("fs");
const path_1 = require("path");
const shelljs_1 = require("shelljs");
const provider_1 = require("../../utils/provider");
function copyFiles(tree, options) {
    return () => {
        (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, 'files'), options.projectRoot, Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.name)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), template: '' }));
    };
}
function generateNewPulumiProject(tree, options) {
    return () => {
        const template = (0, provider_1.getCloudTemplateName)(options.provider);
        const { success } = (0, core_1.execCommand)((0, core_1.buildCommand)([
            `pulumi new ${template}`,
            `--name=${options.projectName}`,
            `--dir=${options.projectRoot}`,
            options.secretsProvider && `--secrets-provider=${options.secretsProvider}`,
            '--generate-only',
            '--yes',
            '--force'
        ]));
        if (!success) {
            throw new Error('Unable to create new Pulumi project!');
        }
    };
}
function loginToPulumi(tree, options) {
    return () => {
        if (!options.login) {
            return;
        }
        if (options.login.startsWith('file://')) {
            options.login = `file://${tree.root}/${options.projectRoot}/${options.login.replace('file://', '')}`;
        }
        const { success } = (0, core_1.execCommand)((0, core_1.buildCommand)(['pulumi login', options.login]));
        if (!success) {
            throw new Error('Unable to login!');
        }
    };
}
function addPulumiDeps(tree, options) {
    return () => {
        const packageJson = (0, devkit_1.readJsonFile)(`${options.projectRoot}/package.json`);
        if (packageJson) {
            (0, devkit_1.addDependenciesToPackageJson)(tree, {}, packageJson.dependencies || {})();
        }
    };
}
function cleanupProject(tree, options) {
    return () => {
        const indexTsLocation = (0, path_1.join)(tree.root, `${options.projectRoot}/index.ts`);
        tree.write(`${options.projectRoot}/pulumi.ts`, (0, fs_1.readFileSync)(indexTsLocation).toString());
        // Remove the unneeded files
        (0, fs_1.unlinkSync)((0, path_1.join)(tree.root, `${options.projectRoot}/.gitignore`));
        (0, fs_1.unlinkSync)((0, path_1.join)(tree.root, `${options.projectRoot}/package.json`));
        (0, fs_1.unlinkSync)((0, path_1.join)(tree.root, `${options.projectRoot}/tsconfig.json`));
    };
}
function default_1(tree, rawOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!(0, shelljs_1.which)('pulumi')) {
            throw new Error('pulumi is not installed!');
        }
        const options = (0, core_1.normalizeOptions)(tree, rawOptions);
        (0, devkit_1.addProjectConfiguration)(tree, options.projectName, {
            root: options.projectRoot,
            projectType: 'application',
            sourceRoot: options.projectRoot,
            targets: {
                up: {
                    executor: '@nx-extend/pulumi:up',
                    options: {}
                },
                preview: {
                    executor: '@nx-extend/pulumi:preview',
                    options: {}
                },
                refresh: {
                    executor: '@nx-extend/pulumi:refresh',
                    options: {}
                }
            },
            tags: options.parsedTags
        });
        yield (0, devkit_1.runTasksInSerial)(generateNewPulumiProject(tree, options), loginToPulumi(tree, options), addPulumiDeps(tree, options), cleanupProject(tree, options), copyFiles(tree, options))();
    });
}
exports.default = default_1;
//# sourceMappingURL=init.impl.js.map