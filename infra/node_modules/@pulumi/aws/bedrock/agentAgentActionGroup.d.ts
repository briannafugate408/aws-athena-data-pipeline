import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource for managing an AWS Agents for Amazon Bedrock Agent Action Group.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.bedrock.AgentAgentActionGroup("example", {
 *     actionGroupName: "example",
 *     agentId: "ABDJFOWER1",
 *     agentVersion: "DRAFT",
 *     skipResourceInUseCheck: true,
 *     actionGroupExecutor: {
 *         lambda: "arn:aws:lambda:us-east-1:123456789012:function:example-function",
 *     },
 *     apiSchema: {
 *         s3: {
 *             s3BucketName: "example-bucket",
 *             s3ObjectKey: "path/to/schema.json",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Agents for Amazon Bedrock Agent Action Group using the `example_id_arg`. For example:
 *
 * ```sh
 * $ pulumi import aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup example ABDJFOWER1,HSKTNKANI4,DRAFT
 * ```
 */
export declare class AgentAgentActionGroup extends pulumi.CustomResource {
    /**
     * Get an existing AgentAgentActionGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AgentAgentActionGroupState, opts?: pulumi.CustomResourceOptions): AgentAgentActionGroup;
    /**
     * Returns true if the given object is an instance of AgentAgentActionGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AgentAgentActionGroup;
    /**
     * Configuration of the executor for the Action Group.
     */
    readonly actionGroupExecutor: pulumi.Output<outputs.bedrock.AgentAgentActionGroupActionGroupExecutor | undefined>;
    readonly actionGroupId: pulumi.Output<string>;
    /**
     * Name of the Agent Action Group.
     */
    readonly actionGroupName: pulumi.Output<string>;
    readonly actionGroupState: pulumi.Output<string>;
    /**
     * Id of the Agent for the Action Group.
     */
    readonly agentId: pulumi.Output<string>;
    /**
     * Version of the Agent to attach the Action Group to.
     */
    readonly agentVersion: pulumi.Output<string>;
    /**
     * Configuration of the API Schema for the Action Group.
     */
    readonly apiSchema: pulumi.Output<outputs.bedrock.AgentAgentActionGroupApiSchema | undefined>;
    readonly description: pulumi.Output<string | undefined>;
    readonly parentActionGroupSignature: pulumi.Output<string | undefined>;
    readonly skipResourceInUseCheck: pulumi.Output<boolean>;
    /**
     * Create a AgentAgentActionGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgentAgentActionGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AgentAgentActionGroup resources.
 */
export interface AgentAgentActionGroupState {
    /**
     * Configuration of the executor for the Action Group.
     */
    actionGroupExecutor?: pulumi.Input<inputs.bedrock.AgentAgentActionGroupActionGroupExecutor>;
    actionGroupId?: pulumi.Input<string>;
    /**
     * Name of the Agent Action Group.
     */
    actionGroupName?: pulumi.Input<string>;
    actionGroupState?: pulumi.Input<string>;
    /**
     * Id of the Agent for the Action Group.
     */
    agentId?: pulumi.Input<string>;
    /**
     * Version of the Agent to attach the Action Group to.
     */
    agentVersion?: pulumi.Input<string>;
    /**
     * Configuration of the API Schema for the Action Group.
     */
    apiSchema?: pulumi.Input<inputs.bedrock.AgentAgentActionGroupApiSchema>;
    description?: pulumi.Input<string>;
    parentActionGroupSignature?: pulumi.Input<string>;
    skipResourceInUseCheck?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a AgentAgentActionGroup resource.
 */
export interface AgentAgentActionGroupArgs {
    /**
     * Configuration of the executor for the Action Group.
     */
    actionGroupExecutor?: pulumi.Input<inputs.bedrock.AgentAgentActionGroupActionGroupExecutor>;
    /**
     * Name of the Agent Action Group.
     */
    actionGroupName: pulumi.Input<string>;
    actionGroupState?: pulumi.Input<string>;
    /**
     * Id of the Agent for the Action Group.
     */
    agentId: pulumi.Input<string>;
    /**
     * Version of the Agent to attach the Action Group to.
     */
    agentVersion: pulumi.Input<string>;
    /**
     * Configuration of the API Schema for the Action Group.
     */
    apiSchema?: pulumi.Input<inputs.bedrock.AgentAgentActionGroupApiSchema>;
    description?: pulumi.Input<string>;
    parentActionGroupSignature?: pulumi.Input<string>;
    skipResourceInUseCheck?: pulumi.Input<boolean>;
}
